/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package tictactoe;

import alphabeta.engine.AlphaBeta;
import alphabeta.engine.Player;

import javax.swing.*;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * @author Abdo
 */
public class GUI extends JFrame {

    /**
     * Creates new form GUI
     */
    private TicTacToe ticTacToe;
    private Player playerX;
    private Player playerO;
    private AlphaBeta abPruning;

    private GUI() {
        initComponents();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        try {
            for (UIManager.LookAndFeelInfo info : UIManager.getInstalledLookAndFeels())
                if ("Nimbus".equals(info.getName())) {
                    UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
            Logger.getLogger(GUI.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
        java.awt.EventQueue.invokeLater(() -> new GUI().setVisible(true));
    }

    private void createGame(boolean IsHumanX, boolean IsHumanO) {
        if (!IsHumanX)
            playerX = new Player(1, "Computer X", Color.RED, false, true, null);
        else
            playerX = new Player(1, "Human X", Color.RED, true, true, null);
        if (!IsHumanO)
            playerO = new Player(2, "Computer O", Color.BLUE, false, false, null);
        else
            playerO = new Player(2, "Human O", Color.BLUE, true, false, null);
        playerO.setOpponent(playerX);
        playerX.setOpponent(playerO);
        ticTacToe = new TicTacToe(playerX, playerO);
    }

    private void updateGamePanel(Graphics g) {
        for (int i = 0; i <= 300; i += 100) {
            g.drawLine(i, 0, i, 300);
            g.drawLine(0, i, 300, i);
        }
        if (ticTacToe != null) {
            g.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 70));
            for (int z = 0; z < 3; z++)
                for (int i = 0; i < 3; i++)
                    if (ticTacToe.getPiece(z, i) == 'X') {
                        g.setColor(playerX.color());
                        g.drawString("X", i * 100 + 30, z * 100 + 80);
                    } else if (ticTacToe.getPiece(z, i) == 'O') {
                        g.setColor(playerO.color());
                        g.drawString("O", i * 100 + 30, z * 100 + 80);
                    }
        }
        repaint();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    private void initComponents() {

        JPanel gamePanel = new JPanel() {
            @Override
            protected void paintComponent(Graphics g) {
                super.paintComponent(g);
                updateGamePanel(g);
            }
        };
        JButton humanVsHumnButton = new JButton();
        JButton humanVSComputer = new JButton();
        JButton computerVSComputer = new JButton();

        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        gamePanel.setBackground(new Color(255, 255, 255));
        gamePanel.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent evt) {
                gamePanelClickedAction(evt);
            }
        });

        GroupLayout gameLayout = new GroupLayout(gamePanel);
        gamePanel.setLayout(gameLayout);
        gameLayout.setHorizontalGroup(
                gameLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGap(0, 301, Short.MAX_VALUE)
        );
        gameLayout.setVerticalGroup(
                gameLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGap(0, 301, Short.MAX_VALUE)
        );

        humanVsHumnButton.setText("H VS H");
        humanVsHumnButton.addActionListener(evt -> startGameHVSH());

        humanVSComputer.setText("H VS C");
        humanVSComputer.addActionListener(evt -> startGameHVSC());

        computerVSComputer.setText("C VS C");
        computerVSComputer.addActionListener(evt -> startGameCVSC());

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(gamePanel, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                                .addGap(0, 11, Short.MAX_VALUE))
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(humanVsHumnButton, GroupLayout.PREFERRED_SIZE, 81, GroupLayout.PREFERRED_SIZE)
                                                .addGap(27, 27, 27)
                                                .addComponent(computerVSComputer, GroupLayout.PREFERRED_SIZE, 90, GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(humanVSComputer, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addContainerGap())))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(gamePanel, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                        .addComponent(humanVsHumnButton)
                                        .addComponent(computerVSComputer)
                                        .addComponent(humanVSComputer))
                                .addContainerGap())
        );

        pack();
    }

    private void gamePanelClickedAction(MouseEvent evt) {
        if (ticTacToe != null && !ticTacToe.checkTerminalState())
            if (playerX.isHuman() && playerX.isPlayerTurn()) {
                int row = evt.getY() / 100, column = evt.getX() / 100;
                TicTacToePosition Pos = ticTacToe.getPositionAt(row, column);
                if (Pos.Piece() == 0) {
                    Pos.applyActionForPlayer(playerX);
                    if (ticTacToe.checkWinner(playerX))
                        JOptionPane.showMessageDialog(null, "X is Winner");
                    else if (ticTacToe.checkDraw())
                        JOptionPane.showMessageDialog(null, "Draw");
                    else if (!playerO.isHuman()) {
                        Pos = (TicTacToePosition) abPruning.getBestMove(ticTacToe, 2, playerO);
                        Pos.applyActionForPlayer(playerO);
                        if (ticTacToe.checkWinner(playerO))
                            JOptionPane.showMessageDialog(null, "O is Winner");
                        else if (ticTacToe.checkDraw())
                            JOptionPane.showMessageDialog(null, "Draw");
                    }
                }
            } else if (playerO.isHuman() && playerO.isPlayerTurn()) {
                int row = evt.getY() / 100, column = evt.getX() / 100;
                TicTacToePosition Pos = ticTacToe.getPositionAt(row, column);
                if (Pos.Piece() == 0) {
                    Pos.applyActionForPlayer(playerO);
                    if (ticTacToe.checkWinner(playerO))
                        JOptionPane.showMessageDialog(null, "O is Winner");
                    else if (ticTacToe.checkDraw())
                        JOptionPane.showMessageDialog(null, "Draw");
                    else if (!playerX.isHuman()) {
                        Pos = (TicTacToePosition) abPruning.getBestMove(ticTacToe, 2, playerO);
                        Pos.applyActionForPlayer(playerX);
                        if (ticTacToe.checkWinner(playerX))
                            JOptionPane.showMessageDialog(null, "X is Winner");
                        else if (ticTacToe.checkDraw())
                            JOptionPane.showMessageDialog(null, "Draw");
                    }
                }
            }
    }

    private void startGameHVSH() {
        createGame(true, true);
        abPruning = new AlphaBeta(playerX, playerO);
    }

    private void startGameCVSC() {
        createGame(false, false);
        abPruning = new AlphaBeta(playerX, playerO);
        TicTacToePosition Pos;
        while (!ticTacToe.checkTerminalState()) {
            Pos = (TicTacToePosition) abPruning.getBestMove(ticTacToe, 2, playerX);
            Pos.applyActionForPlayer(playerX);
            if (ticTacToe.checkWinner(playerX)) {
                JOptionPane.showMessageDialog(null, "X is Winner");
                break;
            } else if (ticTacToe.checkDraw()) {
                JOptionPane.showMessageDialog(null, "Draw");
                break;
            }

            Pos = (TicTacToePosition) abPruning.getBestMove(ticTacToe, 2, playerO);
            Pos.applyActionForPlayer(playerO);
            if (ticTacToe.checkWinner(playerO)) {
                JOptionPane.showMessageDialog(null, "O is Winner");
                break;
            } else if (ticTacToe.checkDraw()) {
                JOptionPane.showMessageDialog(null, "Draw");
                break;
            }
        }
    }

    private void startGameHVSC() {
        createGame(true, false);
        abPruning = new AlphaBeta(playerX, playerO);
    }
}
